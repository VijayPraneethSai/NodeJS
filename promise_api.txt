1. Promise.all
- for parallel api calls
- takes array of promises as an input

- if all api calls are success then output of promise.all will be an array with value of all the results.
- it will give the result after all of them are done(so the return time will be the largest of all promises).

-if any of the promises sends an error the promise.all also sends an error
- right after the error is encountered it will not wait for other promises, it will just send error


2. Promise.allSetteled([p1, p2, p3])

-if all p's are success then it will send success

- it suppose p2 is rejected it will still wait for other promises to settle(err/resolved)
- output will be  [val1, err2, val3]

3. Promise.race([p1, p2, p3])

- gives the value of first settled(err/success(resolved)) promise(fastest promise to settle is returned by this function)

4. Promise.any([p1, p2, p3])
                3s  1s  2s
- will wait for the first success(resolved/fulfilled)
- first p2 is checked(least time) if fail then p3 is checked if failed p1 is checked.
- if all the 3 are rejected then it will be an aggregate error(list of all errors) [err1, err2, err3].



